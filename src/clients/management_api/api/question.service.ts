/**
 * Banter Bus Management API
 * The API specification for the Banter Bus Management API.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { inject, injectable } from 'inversify';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';
import { IAPIConfiguration } from '../IAPIConfiguration';
import IHttpClient from '../IHttpClient';
import { AddQuestionInput } from '../model/addQuestionInput';
import { AddTranslationInput } from '../model/addTranslationInput';
import { QuestionsAllQuestionOut } from '../model/questionsAllQuestionOut';
import { QuestionsQuestionGenericOut } from '../model/questionsQuestionGenericOut';
import { QuestionsQuestionOut } from '../model/questionsQuestionOut';






@injectable()
export class QuestionService {
    private basePath: string = 'http://localhost';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Add a new question to a game.
     *
     * @param gameName The name of the game.
     * @param addQuestionInput

     */
    public addQuestion(gameName: string, addQuestionInput?: AddQuestionInput, observe?: 'body', headers?: Headers): Observable<string>;
    public addQuestion(gameName: string, addQuestionInput?: AddQuestionInput, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public addQuestion(gameName: string, addQuestionInput?: AddQuestionInput, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (gameName === null || gameName === undefined){
            throw new Error('Required parameter gameName was null or undefined when calling addQuestion.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.post(`${this.basePath}/game/${encodeURIComponent(String(gameName))}/question`, addQuestionInput , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <string>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Adds a new question translation.
     *
     * @param gameName The name of the game.
     * @param language The language code for the new question.
     * @param questionId The id for a specific question.
     * @param addTranslationInput

     */
    public addTranslation(gameName: string, language: string, questionId: string, addTranslationInput?: AddTranslationInput, observe?: 'body', headers?: Headers): Observable<any>;
    public addTranslation(gameName: string, language: string, questionId: string, addTranslationInput?: AddTranslationInput, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public addTranslation(gameName: string, language: string, questionId: string, addTranslationInput?: AddTranslationInput, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (gameName === null || gameName === undefined){
            throw new Error('Required parameter gameName was null or undefined when calling addTranslation.');
        }

        if (language === null || language === undefined){
            throw new Error('Required parameter language was null or undefined when calling addTranslation.');
        }

        if (questionId === null || questionId === undefined){
            throw new Error('Required parameter questionId was null or undefined when calling addTranslation.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/game/${encodeURIComponent(String(gameName))}/question/${encodeURIComponent(String(questionId))}/${encodeURIComponent(String(language))}`, addTranslationInput , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Disabled a question.
     *
     * @param gameName The name of the game.
     * @param language The language code for the new question.
     * @param questionId The id for a specific question.

     */
    public disableQuestion(gameName: string, language: string, questionId: string, observe?: 'body', headers?: Headers): Observable<object>;
    public disableQuestion(gameName: string, language: string, questionId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<object>>;
    public disableQuestion(gameName: string, language: string, questionId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (gameName === null || gameName === undefined){
            throw new Error('Required parameter gameName was null or undefined when calling disableQuestion.');
        }

        if (language === null || language === undefined){
            throw new Error('Required parameter language was null or undefined when calling disableQuestion.');
        }

        if (questionId === null || questionId === undefined){
            throw new Error('Required parameter questionId was null or undefined when calling disableQuestion.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<object>> = this.httpClient.put(`${this.basePath}/game/${encodeURIComponent(String(gameName))}/question/${encodeURIComponent(String(questionId))}/disable`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Enables a question.
     *
     * @param gameName The name of the game.
     * @param language The language code for the new question.
     * @param questionId The id for a specific question.

     */
    public enableQuestion(gameName: string, language: string, questionId: string, observe?: 'body', headers?: Headers): Observable<object>;
    public enableQuestion(gameName: string, language: string, questionId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<object>>;
    public enableQuestion(gameName: string, language: string, questionId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (gameName === null || gameName === undefined){
            throw new Error('Required parameter gameName was null or undefined when calling enableQuestion.');
        }

        if (language === null || language === undefined){
            throw new Error('Required parameter language was null or undefined when calling enableQuestion.');
        }

        if (questionId === null || questionId === undefined){
            throw new Error('Required parameter questionId was null or undefined when calling enableQuestion.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<object>> = this.httpClient.put(`${this.basePath}/game/${encodeURIComponent(String(gameName))}/question/${encodeURIComponent(String(questionId))}/enable`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get a list of question groups.
     *
     * @param gameName The name of the game.
     * @param round Name of the round for a game.

     */
    public getAllGroups(gameName: string, round: string, observe?: 'body', headers?: Headers): Observable<Array<string>>;
    public getAllGroups(gameName: string, round: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<string>>>;
    public getAllGroups(gameName: string, round: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (gameName === null || gameName === undefined){
            throw new Error('Required parameter gameName was null or undefined when calling getAllGroups.');
        }

        if (round === null || round === undefined){
            throw new Error('Required parameter round was null or undefined when calling getAllGroups.');
        }

        let queryParameters: string[] = [];
        if (round !== undefined) {
            queryParameters.push('round='+encodeURIComponent(String(round)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<string>>> = this.httpClient.get(`${this.basePath}/game/${encodeURIComponent(String(gameName))}/question/group?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<string>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get all languages used for all questions.
     *
     * @param gameName The name of the game.

     */
    public getAllLanguages(gameName: string, observe?: 'body', headers?: Headers): Observable<Array<string>>;
    public getAllLanguages(gameName: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<string>>>;
    public getAllLanguages(gameName: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (gameName === null || gameName === undefined){
            throw new Error('Required parameter gameName was null or undefined when calling getAllLanguages.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<string>>> = this.httpClient.get(`${this.basePath}/game/${encodeURIComponent(String(gameName))}/question/language`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<string>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get a single question.
     *
     * @param gameName The name of the game.
     * @param language The language code for the new question.
     * @param questionId The id for a specific question.

     */
    public getQuestion(gameName: string, language: string, questionId: string, observe?: 'body', headers?: Headers): Observable<QuestionsQuestionGenericOut>;
    public getQuestion(gameName: string, language: string, questionId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<QuestionsQuestionGenericOut>>;
    public getQuestion(gameName: string, language: string, questionId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (gameName === null || gameName === undefined){
            throw new Error('Required parameter gameName was null or undefined when calling getQuestion.');
        }

        if (language === null || language === undefined){
            throw new Error('Required parameter language was null or undefined when calling getQuestion.');
        }

        if (questionId === null || questionId === undefined){
            throw new Error('Required parameter questionId was null or undefined when calling getQuestion.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<QuestionsQuestionGenericOut>> = this.httpClient.get(`${this.basePath}/game/${encodeURIComponent(String(gameName))}/question/${encodeURIComponent(String(questionId))}/${encodeURIComponent(String(language))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <QuestionsQuestionGenericOut>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Gets a list of questions.
     *
     * @param gameName The name of the game.
     * @param round Name of the round for a game.
     * @param enabled If set to false will retrieve questions that are not enabled.
     * @param groupName The name of the group.
     * @param language The language code for the new question.
     * @param limit The number of questions to retrieve.
     * @param random If set will retrieve questions randomly.

     */
    public getQuestions(gameName: string, round: string, enabled?: 'enabled' | 'disabled' | 'all', groupName?: string, language?: string, limit?: number, random?: boolean, observe?: 'body', headers?: Headers): Observable<Array<QuestionsQuestionOut>>;
    public getQuestions(gameName: string, round: string, enabled?: 'enabled' | 'disabled' | 'all', groupName?: string, language?: string, limit?: number, random?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<QuestionsQuestionOut>>>;
    public getQuestions(gameName: string, round: string, enabled?: 'enabled' | 'disabled' | 'all', groupName?: string, language?: string, limit?: number, random?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (gameName === null || gameName === undefined){
            throw new Error('Required parameter gameName was null or undefined when calling getQuestions.');
        }

        if (round === null || round === undefined){
            throw new Error('Required parameter round was null or undefined when calling getQuestions.');
        }

        let queryParameters: string[] = [];
        if (enabled !== undefined) {
            queryParameters.push('enabled='+encodeURIComponent(String(enabled)));
        }
        if (groupName !== undefined) {
            queryParameters.push('groupName='+encodeURIComponent(String(groupName)));
        }
        if (language !== undefined) {
            queryParameters.push('language='+encodeURIComponent(String(language)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (random !== undefined) {
            queryParameters.push('random='+encodeURIComponent(String(random)));
        }
        if (round !== undefined) {
            queryParameters.push('round='+encodeURIComponent(String(round)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<QuestionsQuestionOut>>> = this.httpClient.get(`${this.basePath}/game/${encodeURIComponent(String(gameName))}/question?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<QuestionsQuestionOut>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get all questions IDs for a game.
     *
     * @param gameName The name of the game.
     * @param cursor The ID to start at for retrieving ID
     * @param limit The number of questions to retrieve.

     */
    public getQuestionsIDs(gameName: string, cursor?: string, limit?: number, observe?: 'body', headers?: Headers): Observable<QuestionsAllQuestionOut>;
    public getQuestionsIDs(gameName: string, cursor?: string, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<QuestionsAllQuestionOut>>;
    public getQuestionsIDs(gameName: string, cursor?: string, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (gameName === null || gameName === undefined){
            throw new Error('Required parameter gameName was null or undefined when calling getQuestionsIDs.');
        }

        let queryParameters: string[] = [];
        if (cursor !== undefined) {
            queryParameters.push('cursor='+encodeURIComponent(String(cursor)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<QuestionsAllQuestionOut>> = this.httpClient.get(`${this.basePath}/game/${encodeURIComponent(String(gameName))}/question/id?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <QuestionsAllQuestionOut>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Remove a question from a game.
     *
     * @param gameName The name of the game.
     * @param language The language code for the new question.
     * @param questionId The id for a specific question.

     */
    public removeQuestion(gameName: string, language: string, questionId: string, observe?: 'body', headers?: Headers): Observable<any>;
    public removeQuestion(gameName: string, language: string, questionId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public removeQuestion(gameName: string, language: string, questionId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (gameName === null || gameName === undefined){
            throw new Error('Required parameter gameName was null or undefined when calling removeQuestion.');
        }

        if (language === null || language === undefined){
            throw new Error('Required parameter language was null or undefined when calling removeQuestion.');
        }

        if (questionId === null || questionId === undefined){
            throw new Error('Required parameter questionId was null or undefined when calling removeQuestion.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/game/${encodeURIComponent(String(gameName))}/question/${encodeURIComponent(String(questionId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Remove a question translation from a game.
     *
     * @param gameName The name of the game.
     * @param language The language code for the new question.
     * @param questionId The id for a specific question.

     */
    public removeTranslation(gameName: string, language: string, questionId: string, observe?: 'body', headers?: Headers): Observable<any>;
    public removeTranslation(gameName: string, language: string, questionId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public removeTranslation(gameName: string, language: string, questionId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (gameName === null || gameName === undefined){
            throw new Error('Required parameter gameName was null or undefined when calling removeTranslation.');
        }

        if (language === null || language === undefined){
            throw new Error('Required parameter language was null or undefined when calling removeTranslation.');
        }

        if (questionId === null || questionId === undefined){
            throw new Error('Required parameter questionId was null or undefined when calling removeTranslation.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/game/${encodeURIComponent(String(gameName))}/question/${encodeURIComponent(String(questionId))}/${encodeURIComponent(String(language))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }

}
