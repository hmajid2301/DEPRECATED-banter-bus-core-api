/* tslint:disable */
/* eslint-disable */
/**
 * Banter Bus Management API
 * The API specification for the Banter Bus Management API.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import type { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { RequestArgs } from '../base';
import { BASE_PATH, BaseAPI, RequiredError } from '../base';
import type { AddQuestionFmInput } from '../models';
import type { AddTranslationFmInput } from '../models';
import type { QuestionsAllQuestionOut } from '../models';
import type { QuestionsQuestionGenericOut } from '../models';
import type { QuestionsQuestionOut } from '../models';
/**
 * QuestionApi - axios parameter creator
 * @export
 */
export const QuestionApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add a new question to a game.
     * @param {string} gameName The name of the game.
     * @param {AddQuestionFmInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuestionFm: async (gameName: string, body?: AddQuestionFmInput, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling addQuestionFm.',
        );
      }
      const localVarPath = `/game/{game_name}/question`.replace(
        `{${'game_name'}}`,
        encodeURIComponent(String(gameName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Adds a new question translation.
     * @param {string} gameName The name of the game.
     * @param {string} language The language code for the new question.
     * @param {string} questionId The id for a specific question.
     * @param {AddTranslationFmInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTranslationFm: async (
      gameName: string,
      language: string,
      questionId: string,
      body?: AddTranslationFmInput,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling addTranslationFm.',
        );
      }
      // verify required parameter 'language' is not null or undefined
      if (language === null || language === undefined) {
        throw new RequiredError(
          'language',
          'Required parameter language was null or undefined when calling addTranslationFm.',
        );
      }
      // verify required parameter 'questionId' is not null or undefined
      if (questionId === null || questionId === undefined) {
        throw new RequiredError(
          'questionId',
          'Required parameter questionId was null or undefined when calling addTranslationFm.',
        );
      }
      const localVarPath = `/game/{game_name}/question/{question_id}/{language}`
        .replace(`{${'game_name'}}`, encodeURIComponent(String(gameName)))
        .replace(`{${'language'}}`, encodeURIComponent(String(language)))
        .replace(`{${'question_id'}}`, encodeURIComponent(String(questionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Disabled a question.
     * @param {string} gameName The name of the game.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableQuestionFm: async (gameName: string, questionId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling disableQuestionFm.',
        );
      }
      // verify required parameter 'questionId' is not null or undefined
      if (questionId === null || questionId === undefined) {
        throw new RequiredError(
          'questionId',
          'Required parameter questionId was null or undefined when calling disableQuestionFm.',
        );
      }
      const localVarPath = `/game/{game_name}/question/{question_id}/disable`
        .replace(`{${'game_name'}}`, encodeURIComponent(String(gameName)))
        .replace(`{${'question_id'}}`, encodeURIComponent(String(questionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Enables a question.
     * @param {string} gameName The name of the game.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enableQuestionFm: async (gameName: string, questionId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling enableQuestionFm.',
        );
      }
      // verify required parameter 'questionId' is not null or undefined
      if (questionId === null || questionId === undefined) {
        throw new RequiredError(
          'questionId',
          'Required parameter questionId was null or undefined when calling enableQuestionFm.',
        );
      }
      const localVarPath = `/game/{game_name}/question/{question_id}/enable`
        .replace(`{${'game_name'}}`, encodeURIComponent(String(gameName)))
        .replace(`{${'question_id'}}`, encodeURIComponent(String(questionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a list of question groups.
     * @param {string} gameName The name of the game.
     * @param {string} round Name of the round for a game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGroupsFm: async (gameName: string, round: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling getAllGroupsFm.',
        );
      }
      // verify required parameter 'round' is not null or undefined
      if (round === null || round === undefined) {
        throw new RequiredError('round', 'Required parameter round was null or undefined when calling getAllGroupsFm.');
      }
      const localVarPath = `/game/{game_name}/question/group`.replace(
        `{${'game_name'}}`,
        encodeURIComponent(String(gameName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (round !== undefined) {
        localVarQueryParameter['round'] = round;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all languages used for all questions.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllLanguagesFm: async (gameName: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling getAllLanguagesFm.',
        );
      }
      const localVarPath = `/game/{game_name}/question/language`.replace(
        `{${'game_name'}}`,
        encodeURIComponent(String(gameName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a single question.
     * @param {string} gameName The name of the game.
     * @param {string} language The language code for the new question.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestionFm: async (
      gameName: string,
      language: string,
      questionId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling getQuestionFm.',
        );
      }
      // verify required parameter 'language' is not null or undefined
      if (language === null || language === undefined) {
        throw new RequiredError(
          'language',
          'Required parameter language was null or undefined when calling getQuestionFm.',
        );
      }
      // verify required parameter 'questionId' is not null or undefined
      if (questionId === null || questionId === undefined) {
        throw new RequiredError(
          'questionId',
          'Required parameter questionId was null or undefined when calling getQuestionFm.',
        );
      }
      const localVarPath = `/game/{game_name}/question/{question_id}/{language}`
        .replace(`{${'game_name'}}`, encodeURIComponent(String(gameName)))
        .replace(`{${'language'}}`, encodeURIComponent(String(language)))
        .replace(`{${'question_id'}}`, encodeURIComponent(String(questionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets a list of questions.
     * @param {string} gameName The name of the game.
     * @param {string} round Name of the round for a game.
     * @param {string} [enabled] If set to false will retrieve questions that are not enabled.
     * @param {string} [groupName] The name of the group.
     * @param {string} [language] The language code for the new question.
     * @param {number} [limit] The number of questions to retrieve.
     * @param {boolean} [random] If set will retrieve questions randomly.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestionsFm: async (
      gameName: string,
      round: string,
      enabled?: string,
      groupName?: string,
      language?: string,
      limit?: number,
      random?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling getQuestionsFm.',
        );
      }
      // verify required parameter 'round' is not null or undefined
      if (round === null || round === undefined) {
        throw new RequiredError('round', 'Required parameter round was null or undefined when calling getQuestionsFm.');
      }
      const localVarPath = `/game/{game_name}/question`.replace(
        `{${'game_name'}}`,
        encodeURIComponent(String(gameName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (enabled !== undefined) {
        localVarQueryParameter['enabled'] = enabled;
      }

      if (groupName !== undefined) {
        localVarQueryParameter['group_name'] = groupName;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (random !== undefined) {
        localVarQueryParameter['random'] = random;
      }

      if (round !== undefined) {
        localVarQueryParameter['round'] = round;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all questions IDs for a game.
     * @param {string} gameName The name of the game.
     * @param {string} [cursor] The ID to start at for retrieving ID
     * @param {number} [limit] The number of questions to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestionsIDsFm: async (
      gameName: string,
      cursor?: string,
      limit?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling getQuestionsIDsFm.',
        );
      }
      const localVarPath = `/game/{game_name}/question/id`.replace(
        `{${'game_name'}}`,
        encodeURIComponent(String(gameName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (cursor !== undefined) {
        localVarQueryParameter['cursor'] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a question from a game.
     * @param {string} gameName The name of the game.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeQuestionFm: async (gameName: string, questionId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling removeQuestionFm.',
        );
      }
      // verify required parameter 'questionId' is not null or undefined
      if (questionId === null || questionId === undefined) {
        throw new RequiredError(
          'questionId',
          'Required parameter questionId was null or undefined when calling removeQuestionFm.',
        );
      }
      const localVarPath = `/game/{game_name}/question/{question_id}`
        .replace(`{${'game_name'}}`, encodeURIComponent(String(gameName)))
        .replace(`{${'question_id'}}`, encodeURIComponent(String(questionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a question translation from a game.
     * @param {string} gameName The name of the game.
     * @param {string} language The language code for the new question.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeTranslationFm: async (
      gameName: string,
      language: string,
      questionId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling removeTranslationFm.',
        );
      }
      // verify required parameter 'language' is not null or undefined
      if (language === null || language === undefined) {
        throw new RequiredError(
          'language',
          'Required parameter language was null or undefined when calling removeTranslationFm.',
        );
      }
      // verify required parameter 'questionId' is not null or undefined
      if (questionId === null || questionId === undefined) {
        throw new RequiredError(
          'questionId',
          'Required parameter questionId was null or undefined when calling removeTranslationFm.',
        );
      }
      const localVarPath = `/game/{game_name}/question/{question_id}/{language}`
        .replace(`{${'game_name'}}`, encodeURIComponent(String(gameName)))
        .replace(`{${'language'}}`, encodeURIComponent(String(language)))
        .replace(`{${'question_id'}}`, encodeURIComponent(String(questionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * QuestionApi - functional programming interface
 * @export
 */
export const QuestionApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add a new question to a game.
     * @param {string} gameName The name of the game.
     * @param {AddQuestionFmInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addQuestionFm(
      gameName: string,
      body?: AddQuestionFmInput,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await QuestionApiAxiosParamCreator(configuration).addQuestionFm(
        gameName,
        body,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Adds a new question translation.
     * @param {string} gameName The name of the game.
     * @param {string} language The language code for the new question.
     * @param {string} questionId The id for a specific question.
     * @param {AddTranslationFmInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addTranslationFm(
      gameName: string,
      language: string,
      questionId: string,
      body?: AddTranslationFmInput,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await QuestionApiAxiosParamCreator(configuration).addTranslationFm(
        gameName,
        language,
        questionId,
        body,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Disabled a question.
     * @param {string} gameName The name of the game.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async disableQuestionFm(
      gameName: string,
      questionId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await QuestionApiAxiosParamCreator(configuration).disableQuestionFm(
        gameName,
        questionId,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Enables a question.
     * @param {string} gameName The name of the game.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async enableQuestionFm(
      gameName: string,
      questionId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await QuestionApiAxiosParamCreator(configuration).enableQuestionFm(
        gameName,
        questionId,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get a list of question groups.
     * @param {string} gameName The name of the game.
     * @param {string} round Name of the round for a game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllGroupsFm(
      gameName: string,
      round: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs = await QuestionApiAxiosParamCreator(configuration).getAllGroupsFm(
        gameName,
        round,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get all languages used for all questions.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllLanguagesFm(
      gameName: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs = await QuestionApiAxiosParamCreator(configuration).getAllLanguagesFm(gameName, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get a single question.
     * @param {string} gameName The name of the game.
     * @param {string} language The language code for the new question.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getQuestionFm(
      gameName: string,
      language: string,
      questionId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionsQuestionGenericOut>> {
      const localVarAxiosArgs = await QuestionApiAxiosParamCreator(configuration).getQuestionFm(
        gameName,
        language,
        questionId,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets a list of questions.
     * @param {string} gameName The name of the game.
     * @param {string} round Name of the round for a game.
     * @param {string} [enabled] If set to false will retrieve questions that are not enabled.
     * @param {string} [groupName] The name of the group.
     * @param {string} [language] The language code for the new question.
     * @param {number} [limit] The number of questions to retrieve.
     * @param {boolean} [random] If set will retrieve questions randomly.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getQuestionsFm(
      gameName: string,
      round: string,
      enabled?: string,
      groupName?: string,
      language?: string,
      limit?: number,
      random?: boolean,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuestionsQuestionOut>>> {
      const localVarAxiosArgs = await QuestionApiAxiosParamCreator(configuration).getQuestionsFm(
        gameName,
        round,
        enabled,
        groupName,
        language,
        limit,
        random,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get all questions IDs for a game.
     * @param {string} gameName The name of the game.
     * @param {string} [cursor] The ID to start at for retrieving ID
     * @param {number} [limit] The number of questions to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getQuestionsIDsFm(
      gameName: string,
      cursor?: string,
      limit?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionsAllQuestionOut>> {
      const localVarAxiosArgs = await QuestionApiAxiosParamCreator(configuration).getQuestionsIDsFm(
        gameName,
        cursor,
        limit,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Remove a question from a game.
     * @param {string} gameName The name of the game.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeQuestionFm(
      gameName: string,
      questionId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await QuestionApiAxiosParamCreator(configuration).removeQuestionFm(
        gameName,
        questionId,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Remove a question translation from a game.
     * @param {string} gameName The name of the game.
     * @param {string} language The language code for the new question.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeTranslationFm(
      gameName: string,
      language: string,
      questionId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await QuestionApiAxiosParamCreator(configuration).removeTranslationFm(
        gameName,
        language,
        questionId,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * QuestionApi - factory interface
 * @export
 */
export const QuestionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary Add a new question to a game.
     * @param {string} gameName The name of the game.
     * @param {AddQuestionFmInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuestionFm(gameName: string, body?: AddQuestionFmInput, options?: any): AxiosPromise<string> {
      return QuestionApiFp(configuration)
        .addQuestionFm(gameName, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Adds a new question translation.
     * @param {string} gameName The name of the game.
     * @param {string} language The language code for the new question.
     * @param {string} questionId The id for a specific question.
     * @param {AddTranslationFmInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTranslationFm(
      gameName: string,
      language: string,
      questionId: string,
      body?: AddTranslationFmInput,
      options?: any,
    ): AxiosPromise<void> {
      return QuestionApiFp(configuration)
        .addTranslationFm(gameName, language, questionId, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Disabled a question.
     * @param {string} gameName The name of the game.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableQuestionFm(gameName: string, questionId: string, options?: any): AxiosPromise<any> {
      return QuestionApiFp(configuration)
        .disableQuestionFm(gameName, questionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Enables a question.
     * @param {string} gameName The name of the game.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enableQuestionFm(gameName: string, questionId: string, options?: any): AxiosPromise<any> {
      return QuestionApiFp(configuration)
        .enableQuestionFm(gameName, questionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a list of question groups.
     * @param {string} gameName The name of the game.
     * @param {string} round Name of the round for a game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGroupsFm(gameName: string, round: string, options?: any): AxiosPromise<Array<string>> {
      return QuestionApiFp(configuration)
        .getAllGroupsFm(gameName, round, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all languages used for all questions.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllLanguagesFm(gameName: string, options?: any): AxiosPromise<Array<string>> {
      return QuestionApiFp(configuration)
        .getAllLanguagesFm(gameName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a single question.
     * @param {string} gameName The name of the game.
     * @param {string} language The language code for the new question.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestionFm(
      gameName: string,
      language: string,
      questionId: string,
      options?: any,
    ): AxiosPromise<QuestionsQuestionGenericOut> {
      return QuestionApiFp(configuration)
        .getQuestionFm(gameName, language, questionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets a list of questions.
     * @param {string} gameName The name of the game.
     * @param {string} round Name of the round for a game.
     * @param {string} [enabled] If set to false will retrieve questions that are not enabled.
     * @param {string} [groupName] The name of the group.
     * @param {string} [language] The language code for the new question.
     * @param {number} [limit] The number of questions to retrieve.
     * @param {boolean} [random] If set will retrieve questions randomly.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestionsFm(
      gameName: string,
      round: string,
      enabled?: string,
      groupName?: string,
      language?: string,
      limit?: number,
      random?: boolean,
      options?: any,
    ): AxiosPromise<Array<QuestionsQuestionOut>> {
      return QuestionApiFp(configuration)
        .getQuestionsFm(gameName, round, enabled, groupName, language, limit, random, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all questions IDs for a game.
     * @param {string} gameName The name of the game.
     * @param {string} [cursor] The ID to start at for retrieving ID
     * @param {number} [limit] The number of questions to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestionsIDsFm(
      gameName: string,
      cursor?: string,
      limit?: number,
      options?: any,
    ): AxiosPromise<QuestionsAllQuestionOut> {
      return QuestionApiFp(configuration)
        .getQuestionsIDsFm(gameName, cursor, limit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a question from a game.
     * @param {string} gameName The name of the game.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeQuestionFm(gameName: string, questionId: string, options?: any): AxiosPromise<void> {
      return QuestionApiFp(configuration)
        .removeQuestionFm(gameName, questionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a question translation from a game.
     * @param {string} gameName The name of the game.
     * @param {string} language The language code for the new question.
     * @param {string} questionId The id for a specific question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeTranslationFm(gameName: string, language: string, questionId: string, options?: any): AxiosPromise<void> {
      return QuestionApiFp(configuration)
        .removeTranslationFm(gameName, language, questionId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * QuestionApi - object-oriented interface
 * @export
 * @class QuestionApi
 * @extends {BaseAPI}
 */
export class QuestionApi extends BaseAPI {
  /**
   *
   * @summary Add a new question to a game.
   * @param {string} gameName The name of the game.
   * @param {AddQuestionFmInput} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionApi
   */
  public addQuestionFm(gameName: string, body?: AddQuestionFmInput, options?: any) {
    return QuestionApiFp(this.configuration)
      .addQuestionFm(gameName, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Adds a new question translation.
   * @param {string} gameName The name of the game.
   * @param {string} language The language code for the new question.
   * @param {string} questionId The id for a specific question.
   * @param {AddTranslationFmInput} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionApi
   */
  public addTranslationFm(
    gameName: string,
    language: string,
    questionId: string,
    body?: AddTranslationFmInput,
    options?: any,
  ) {
    return QuestionApiFp(this.configuration)
      .addTranslationFm(gameName, language, questionId, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Disabled a question.
   * @param {string} gameName The name of the game.
   * @param {string} questionId The id for a specific question.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionApi
   */
  public disableQuestionFm(gameName: string, questionId: string, options?: any) {
    return QuestionApiFp(this.configuration)
      .disableQuestionFm(gameName, questionId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Enables a question.
   * @param {string} gameName The name of the game.
   * @param {string} questionId The id for a specific question.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionApi
   */
  public enableQuestionFm(gameName: string, questionId: string, options?: any) {
    return QuestionApiFp(this.configuration)
      .enableQuestionFm(gameName, questionId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get a list of question groups.
   * @param {string} gameName The name of the game.
   * @param {string} round Name of the round for a game.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionApi
   */
  public getAllGroupsFm(gameName: string, round: string, options?: any) {
    return QuestionApiFp(this.configuration)
      .getAllGroupsFm(gameName, round, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get all languages used for all questions.
   * @param {string} gameName The name of the game.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionApi
   */
  public getAllLanguagesFm(gameName: string, options?: any) {
    return QuestionApiFp(this.configuration)
      .getAllLanguagesFm(gameName, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get a single question.
   * @param {string} gameName The name of the game.
   * @param {string} language The language code for the new question.
   * @param {string} questionId The id for a specific question.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionApi
   */
  public getQuestionFm(gameName: string, language: string, questionId: string, options?: any) {
    return QuestionApiFp(this.configuration)
      .getQuestionFm(gameName, language, questionId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets a list of questions.
   * @param {string} gameName The name of the game.
   * @param {string} round Name of the round for a game.
   * @param {string} [enabled] If set to false will retrieve questions that are not enabled.
   * @param {string} [groupName] The name of the group.
   * @param {string} [language] The language code for the new question.
   * @param {number} [limit] The number of questions to retrieve.
   * @param {boolean} [random] If set will retrieve questions randomly.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionApi
   */
  public getQuestionsFm(
    gameName: string,
    round: string,
    enabled?: string,
    groupName?: string,
    language?: string,
    limit?: number,
    random?: boolean,
    options?: any,
  ) {
    return QuestionApiFp(this.configuration)
      .getQuestionsFm(gameName, round, enabled, groupName, language, limit, random, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get all questions IDs for a game.
   * @param {string} gameName The name of the game.
   * @param {string} [cursor] The ID to start at for retrieving ID
   * @param {number} [limit] The number of questions to retrieve.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionApi
   */
  public getQuestionsIDsFm(gameName: string, cursor?: string, limit?: number, options?: any) {
    return QuestionApiFp(this.configuration)
      .getQuestionsIDsFm(gameName, cursor, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Remove a question from a game.
   * @param {string} gameName The name of the game.
   * @param {string} questionId The id for a specific question.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionApi
   */
  public removeQuestionFm(gameName: string, questionId: string, options?: any) {
    return QuestionApiFp(this.configuration)
      .removeQuestionFm(gameName, questionId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Remove a question translation from a game.
   * @param {string} gameName The name of the game.
   * @param {string} language The language code for the new question.
   * @param {string} questionId The id for a specific question.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionApi
   */
  public removeTranslationFm(gameName: string, language: string, questionId: string, options?: any) {
    return QuestionApiFp(this.configuration)
      .removeTranslationFm(gameName, language, questionId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
