/* tslint:disable */
/* eslint-disable */
/**
 * Banter Bus Management API
 * The API specification for the Banter Bus Management API.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import type { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { RequestArgs } from '../base';
import { BASE_PATH, BaseAPI, RequiredError } from '../base';
import type { AddGameFmInput } from '../models';
import type { GamesGameOut } from '../models';
/**
 * GameApi - axios parameter creator
 * @export
 */
export const GameApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create a new game.
     * @param {AddGameFmInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addGameFm: async (body?: AddGameFmInput, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/game`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Disables a game.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableGameFm: async (gameName: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling disableGameFm.',
        );
      }
      const localVarPath = `/game/{game_name}/disable`.replace(
        `{${'game_name'}}`,
        encodeURIComponent(String(gameName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Enables a game.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enableGameFm: async (gameName: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling enableGameFm.',
        );
      }
      const localVarPath = `/game/{game_name}/enable`.replace(`{${'game_name'}}`, encodeURIComponent(String(gameName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a game.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameFm: async (gameName: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling getGameFm.',
        );
      }
      const localVarPath = `/game/{game_name}`.replace(`{${'game_name'}}`, encodeURIComponent(String(gameName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all games.
     * @param {string} [games]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGamesFm: async (games?: string, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/game`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (games !== undefined) {
        localVarQueryParameter['games'] = games;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a game.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeGameFm: async (gameName: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'gameName' is not null or undefined
      if (gameName === null || gameName === undefined) {
        throw new RequiredError(
          'gameName',
          'Required parameter gameName was null or undefined when calling removeGameFm.',
        );
      }
      const localVarPath = `/game/{game_name}`.replace(`{${'game_name'}}`, encodeURIComponent(String(gameName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GameApi - functional programming interface
 * @export
 */
export const GameApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create a new game.
     * @param {AddGameFmInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addGameFm(
      body?: AddGameFmInput,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await GameApiAxiosParamCreator(configuration).addGameFm(body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Disables a game.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async disableGameFm(
      gameName: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await GameApiAxiosParamCreator(configuration).disableGameFm(gameName, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Enables a game.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async enableGameFm(
      gameName: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await GameApiAxiosParamCreator(configuration).enableGameFm(gameName, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get a game.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameFm(
      gameName: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GamesGameOut>> {
      const localVarAxiosArgs = await GameApiAxiosParamCreator(configuration).getGameFm(gameName, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get all games.
     * @param {string} [games]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGamesFm(
      games?: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs = await GameApiAxiosParamCreator(configuration).getGamesFm(games, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Delete a game.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeGameFm(
      gameName: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await GameApiAxiosParamCreator(configuration).removeGameFm(gameName, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * GameApi - factory interface
 * @export
 */
export const GameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary Create a new game.
     * @param {AddGameFmInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addGameFm(body?: AddGameFmInput, options?: any): AxiosPromise<any> {
      return GameApiFp(configuration)
        .addGameFm(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Disables a game.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableGameFm(gameName: string, options?: any): AxiosPromise<any> {
      return GameApiFp(configuration)
        .disableGameFm(gameName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Enables a game.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enableGameFm(gameName: string, options?: any): AxiosPromise<any> {
      return GameApiFp(configuration)
        .enableGameFm(gameName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a game.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameFm(gameName: string, options?: any): AxiosPromise<GamesGameOut> {
      return GameApiFp(configuration)
        .getGameFm(gameName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all games.
     * @param {string} [games]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGamesFm(games?: string, options?: any): AxiosPromise<Array<string>> {
      return GameApiFp(configuration)
        .getGamesFm(games, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a game.
     * @param {string} gameName The name of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeGameFm(gameName: string, options?: any): AxiosPromise<any> {
      return GameApiFp(configuration)
        .removeGameFm(gameName, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GameApi - object-oriented interface
 * @export
 * @class GameApi
 * @extends {BaseAPI}
 */
export class GameApi extends BaseAPI {
  /**
   *
   * @summary Create a new game.
   * @param {AddGameFmInput} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameApi
   */
  public addGameFm(body?: AddGameFmInput, options?: any) {
    return GameApiFp(this.configuration)
      .addGameFm(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Disables a game.
   * @param {string} gameName The name of the game.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameApi
   */
  public disableGameFm(gameName: string, options?: any) {
    return GameApiFp(this.configuration)
      .disableGameFm(gameName, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Enables a game.
   * @param {string} gameName The name of the game.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameApi
   */
  public enableGameFm(gameName: string, options?: any) {
    return GameApiFp(this.configuration)
      .enableGameFm(gameName, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get a game.
   * @param {string} gameName The name of the game.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameApi
   */
  public getGameFm(gameName: string, options?: any) {
    return GameApiFp(this.configuration)
      .getGameFm(gameName, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get all games.
   * @param {string} [games]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameApi
   */
  public getGamesFm(games?: string, options?: any) {
    return GameApiFp(this.configuration)
      .getGamesFm(games, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Delete a game.
   * @param {string} gameName The name of the game.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameApi
   */
  public removeGameFm(gameName: string, options?: any) {
    return GameApiFp(this.configuration)
      .removeGameFm(gameName, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
